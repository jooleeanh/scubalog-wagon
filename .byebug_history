continue
quit!
Quit!
finish
continue
next
continue
next
di.valid?
di = user.dives.new(dives.first)
Divesite.count
next
step
quit!
reload!
create_divesites
Divesite.find_by(name: "Cathedral Rock")
Divesite.count
Divesite.find_by(name: "Jemeluk")
dives.first
di.errors
di.valid?
di
di = user.dives.new(dives.first)
user.valid?
user.valid
user
Dive.new(dives.first).errors
Dive.new(dives.first).valid?
dives.first.valid?
dives.count
dives
next
step
dives.count
dives
seed.create_dives(User.find(self.id))
seed.create_divesites
Divesite.find_by(name: "Kittiwake")
Divesite.last
seed.create_divesites
seed.create_dives(User.find(self.id))
User.find(self.id)
self.id
continue
next
step
continue
next
whereami
seed.create_dives(User.find_by(id: self.id))
seed.create_dives(seed.julian)
continue
next
nexat
step
continue
next
dives.count
dives
step
continue
finish
catch
finish
catch
finish
catch
help
step
next
step
continue
next
step
continue
next
step
continue
next
step
continue
next
status
next
*args
args
@args
next
continue
Divesite.count
Divesite.all
user.dives.count
user.dives
seed.create_dives(user)
seed.create_dives(users)
user
user = self
current_user
self
seed.create_dives
continue
next
transaction
error
next
Divesite.all
next
continue
next
continue
finish
help
self
skip
self.valid?
self
next
continue
next
quit
next
self
next
continue
next
quit
self
seed = SeedCustom.new
seed = Custom.new
require_relative 'db/seed_custom'
require_relative '../db/seed_custom'
require_relative '../../db/seed_custom'
continue
next
continue
finish
next
data
dat
next
data
next
continue
finish
data
next
data
next
data
quit
qui
user.dives.group_by_day(:datetime).count.to_a.sort { |k, v| k[0] <=> v[0] }.map { |k, v| { k: (sum += v) } }.reduce({}, :merge)
sum = 0
user.dives.group_by_day(:datetime).count.map { |k, v| { k: (sum += v) } }
user.dives.group_by_day(:datetime).count
user.dives.group_by_day(:datetime).first
user.dives.group_by_day(:datetime)
user
quit
event.description
event.datetime.strftime("%b %d %Y")
event.datetime
event
next
